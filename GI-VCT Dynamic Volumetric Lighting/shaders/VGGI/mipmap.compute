#version 430
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

uniform int srcMipLevel;
layout(binding = 0) uniform sampler3D srcMip;
layout(binding = 1, rgba8) writeonly uniform image3D dstMip;


void main()
{
	vec3 size = imageSize(dstMip);

	if (gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y || gl_GlobalInvocationID.z >= size.z)
	{
		// out of range, ignore
	}
	else
	{

		ivec3 dstPos = ivec3(gl_GlobalInvocationID);
		ivec3 srcPos = dstPos * 2;

		/*vec4 srcColor[8];

		srcColor[0] = texelFetch(srcMip, srcPos + ivec3(0, 0, 0), srcMipLevel);
		srcColor[1] = texelFetch(srcMip, srcPos + ivec3(1, 0, 0), srcMipLevel);
		srcColor[2] = texelFetch(srcMip, srcPos + ivec3(0, 1, 0), srcMipLevel);
		srcColor[3] = texelFetch(srcMip, srcPos + ivec3(1, 1, 0), srcMipLevel);
		srcColor[4] = texelFetch(srcMip, srcPos + ivec3(0, 0, 1), srcMipLevel);
		srcColor[5] = texelFetch(srcMip, srcPos + ivec3(1, 0, 1), srcMipLevel);
		srcColor[6] = texelFetch(srcMip, srcPos + ivec3(0, 1, 1), srcMipLevel);
		srcColor[7] = texelFetch(srcMip, srcPos + ivec3(1, 1, 1), srcMipLevel);
		
		// ISOTROPIC
		vec4 outColor = vec4(0);
		for(int i = 0; i < 8; i++)
			outColor += srcColor[i];
		outColor *= 0.125;
		
		imageStore(dstMip, dstPos, outColor);*/

		vec4 outColor = textureLod(srcMip, (srcPos + 1.0)/textureSize(srcMip,srcMipLevel), srcMipLevel); 	
		outColor.rgb = outColor.rgb  / outColor.a;
		imageStore(dstMip, dstPos, outColor);
	}
}
