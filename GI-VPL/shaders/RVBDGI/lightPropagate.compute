
#version 430

// solid angles (normalized), subtended by the face onto the neighbor cell center
#define SOLID_ANGLE_A 0.0318842778f // (22.95668f/(4*180.0f)) 
#define SOLID_ANGLE_B 0.0336955972f // (24.26083f/(4*180.0f))

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (std140) uniform Matrices
{
	mat4 projViewModelMatrix;
	mat4 viewModel;
	mat4 view;
	mat3 normalMatrix;
	mat4 model;
	mat4 projection;
};

struct Voxel
{
	uint colorOcclusionMask;
	uvec4 normalMasks;
};

layout(binding = 1, std430) buffer GridBuffer
{
	Voxel gridBuffer[];
};

layout(binding = 2, rgba16f) writeonly uniform image3D redOutputTexture;	// redSHCoeffs
layout(binding = 3, rgba16f) writeonly uniform image3D greenOutputTexture;	// greenSHCoeffs
layout(binding = 4, rgba16f) writeonly uniform image3D blueOutputTexture;	// blueSHCoeffs

layout(binding = 5) uniform sampler3D redSH;	// redSHCoeffs
layout(binding = 6) uniform sampler3D greenSH;	// greenSHCoeffs
layout(binding = 7) uniform sampler3D blueSH;	// blueSHCoeffs

uniform bool useOcclusion;
uniform float fluxAmplifier;
uniform float occlusionAmplifier;

// directions to 6 neighbor cell centers
const vec3 directions[6] =
{
	vec3(0.0f, 0.0f, 1.0f),
	vec3(1.0f, 0.0f, 0.0f),
	vec3(0.0f, 0.0f, -1.0f),
	vec3(-1.0f, 0.0f, 0.0f),
	vec3(0.0f, 1.0f, 0.0f),
	vec3(0.0f, -1.0f, 0.0f)
};

// SH-coeffs for six faces
const vec4 faceCoeffs[6] =
{
	vec4(0.8862269521f, 0.0f, 1.0233267546f, 0.0f),  // ClampedCosineCoeffs(directions[0])
	vec4(0.8862269521f, 0.0f, 0.0f, -1.0233267546f), // ClampedCosineCoeffs(directions[1])
	vec4(0.8862269521f, 0.0f, -1.0233267546f, 0.0f), // ClampedCosineCoeffs(directions[2])
	vec4(0.8862269521f, 0.0f, 0.0f, 1.0233267546f),  // ClampedCosineCoeffs(directions[3])
	vec4(0.8862269521f, -1.0233267546f, 0.0f, 0.0f), // ClampedCosineCoeffs(directions[4])
	vec4(0.8862269521f, 1.0233267546, 0.0f, 0.0f)    // ClampedCosineCoeffs(directions[5])
};
  
// offsets to 6 neighbor cell centers
const ivec3 offsets[6] =
{
	ivec3(0, 0, 1),
	ivec3(1, 0, 0),
	ivec3(0, 0, -1),
	ivec3(-1, 0, 0),
	ivec3(0, 1, 0),
	ivec3(0, -1, 0)
};

// get second order SH-coeffs for specified direction
vec4 SH(in vec3 dir)
{
	vec4 result;
	result.x = 0.2820947918f;         // 1/(2*sqrt(PI))
	result.y = -0.4886025119f;        // -sqrt(3/(4*PI))*y
	result.z = 0.4886025119f;         // sqrt(3/(4*PI))*z
	result.w = -0.4886025119f;        // -sqrt(3/(4*PI))*x
	result.wyz *= dir;
	return result;
}

// Decode specified mask into a float3 normal (normalized).
vec3 DecodeNormal(in uint normalMask)
{
	ivec3 iNormal;
	iNormal.x = int((normalMask>>18) & 0x000000ff);   
	iNormal.y = int((normalMask>>9) & 0x000000ff);
	iNormal.z = int(normalMask & 0x000000ff);
	
	ivec3 iNormalSigns;
	iNormalSigns.x = int((normalMask>>25) & 0x00000002);
	iNormalSigns.y = int((normalMask>>16) & 0x00000002);
	iNormalSigns.z = int((normalMask>>7) & 0x00000002);
	iNormalSigns = 1-iNormalSigns;
	
	vec3 normal = vec3(iNormal)/255.0f;
	normal *= iNormalSigns; 
	return normal;
}

// Determine which of the 4 specified normals (encoded as normalMasks) is closest to 
// the specified direction. The function returns the closest normal and as output 
// parameter the corresponding dot-product.
vec3 GetClosestNormal(in uvec4 normalMasks, in vec3 direction, out float dotProduct)
{  
	mat4x3 normalMatrix;
	normalMatrix[0] = DecodeNormal(normalMasks.x);
	normalMatrix[1] = DecodeNormal(normalMasks.y);
	normalMatrix[2] = DecodeNormal(normalMasks.z);
	normalMatrix[3] = DecodeNormal(normalMasks.w);
	vec4 dotProducts = direction * normalMatrix;

	float maximum = max(max(dotProducts.x, dotProducts.y), max(dotProducts.z, dotProducts.w));
	uint index;
	if(maximum == dotProducts.x)
		index = 0;
	else if(maximum == dotProducts.y)
		index = 1;
	else if(maximum == dotProducts.z)
		index = 2;
	else 
		index = 3;

	dotProduct = dotProducts[index];
	return normalMatrix[index];
}

// A clamped cosine lobe function oriented in Z direction is used and expressed
// as spherical harmonics. Since the function has rotational symmetry around the
// Z axis, the SH projection results in zonal harmonics. The rotation of zonal
// harmonics can be done simpler as for general spherical harmonics. The below
// function returns zonal harmonics, rotated into the specified direction.
vec4 ClampedCosineCoeffs(in vec3 dir)
{
	vec4 coeffs;
	coeffs.x = 0.8862269262f;         // PI/(2*sqrt(PI))
	coeffs.y = -1.0233267079f;        // -((2.0f*PI)/3.0f)*sqrt(3/(4*PI))
	coeffs.z = 1.0233267079f;         // ((2.0f*PI)/3.0f)*sqrt(3/(4*PI))
	coeffs.w = -1.0233267079f;        // -((2.0f*PI)/3.0f)*sqrt(3/(4*PI))
	coeffs.wyz *= dir;
	return coeffs;
}

// get index into a 32x32x32 grid for the specified position
int GetGridIndex(in ivec3 position)
{
	return ((position.z * 1024) + (position.y * 32) + position.x);
}

void main()
{
	// get grid-position of current cell  
	ivec3 elementPos = ivec3(gl_GlobalInvocationID);
   
	// initialize SH-coeffs with values from current cell
	vec4 sumRedSHCoeffs = texelFetch(redSH, elementPos, 0);
	vec4 sumGreenSHCoeffs = texelFetch(greenSH, elementPos, 0);
	vec4 sumBlueSHCoeffs = texelFetch(blueSH, elementPos, 0);

	for(uint i = 0; i < 6; i++)
	{
		// get grid-position of 6 neighbor cells
		ivec3 samplePos = elementPos + offsets[i];

		// continue, if cell out of bounds
		if((samplePos.x < 0) || (samplePos.x > 31) || (samplePos.y < 0) || (samplePos.y > 31) || (samplePos.z < 0) || (samplePos.z > 31))
			continue;

		// load SH-coeffs for neighbor cell
		vec4 redSHCoeffs = texelFetch(redSH, samplePos, 0);
		vec4 greenSHCoeffs = texelFetch(greenSH, samplePos, 0);
		vec4 blueSHCoeffs = texelFetch(blueSH, samplePos, 0);

		vec4 occlusionCoeffs = vec4(0.0f, 0.0f, 0.0f, 0.0f);

		if(useOcclusion)
		{
			// get index of corresponding voxel
			int gridIndex = GetGridIndex(samplePos);
			Voxel voxel = gridBuffer[gridIndex];
			
			// If voxel contains geometry info, find closest normal to current direction. In this way the highest
			// occlusion can be generated. Then get SH-coeffs for retrieved normal.
			if((voxel.colorOcclusionMask & (1<<31U)) != 0)
			{	
				float dotProduct;
				vec3 occlusionNormal = GetClosestNormal(voxel.normalMasks, -directions[i], dotProduct);
				occlusionCoeffs = ClampedCosineCoeffs(occlusionNormal);
			} 
		}

		for(uint j = 0; j < 6; j++)
		{
			// get direction from current neighbor cell center to face of current cell 
			vec3 neighborCellCenter = directions[i];
			vec3 facePosition = directions[j] * 0.5f;
			vec3 dir = facePosition - neighborCellCenter;
			float fLength = length(dir);
			dir /= fLength;

			// get corresponding solid angle
			float solidAngle = 0.0f;
			if(fLength > 0.5f)
				solidAngle = (fLength>=1.5f) ? SOLID_ANGLE_A : SOLID_ANGLE_B;

			// get SH-coeffs for direction 
			vec4 dirSH = SH(dir);  

			// calculate flux from neigbor cell to face of current cell 
			vec3 flux;
			flux.r = dot(redSHCoeffs, dirSH);
			flux.g = dot(greenSHCoeffs, dirSH);
			flux.b = dot(blueSHCoeffs, dirSH);
			flux = max(vec3(0), flux) * solidAngle * fluxAmplifier;

			if(useOcclusion)
			{
				// apply occlusion
				float occlusion = 1.0f - clamp(occlusionAmplifier * dot(occlusionCoeffs, dirSH), 0.0f, 1.0f);
				flux *= occlusion;
			}

			// add contribution to SH-coeffs sums
			vec4 coeffs = faceCoeffs[j];
			sumRedSHCoeffs += coeffs * flux.r;
			sumGreenSHCoeffs += coeffs * flux.g;
			sumBlueSHCoeffs += coeffs * flux.b;
		}
	}

	// write out generated red/ green/ blue SH-coeffs
	imageStore(redOutputTexture, elementPos, sumRedSHCoeffs);
	imageStore(greenOutputTexture, elementPos, sumGreenSHCoeffs);
	imageStore(blueOutputTexture, elementPos, sumBlueSHCoeffs);
}
