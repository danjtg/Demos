#version 400

layout(triangles, equal_spacing, ccw) in;

layout (std140) uniform Matrices
{
	mat4 projectionMatrix;
	mat4 viewMatrix;
	mat4 modelMatrix;
	mat4 projViewModelMatrix;
	mat4 viewModelMatrix;
	mat3 normalMatrix;	
};

uniform sampler2D gDisplacementMap;
uniform float gDispFactor;
uniform vec4 lightDir;

in vec3 tcNormal[];
in vec2 tcTexCoord[];
in vec4 tcPosition[];

out vec3 teNormal;
out vec2 teTexCoord;
out vec3 teEye;
out vec3 teLightDir;

void main()
{
	vec4 position;
	
	// Transform the barycentric coordinates
	vec2 t0 = gl_TessCoord.x * tcTexCoord[0];
    vec2 t1 = gl_TessCoord.y * tcTexCoord[1];
    vec2 t2 = gl_TessCoord.z * tcTexCoord[2];
	teTexCoord = (t0 + t1 + t2);

	vec3 n0 = gl_TessCoord.x * tcNormal[0];
    vec3 n1 = gl_TessCoord.y * tcNormal[1];
    vec3 n2 = gl_TessCoord.z * tcNormal[2];
	teNormal = normalize((n0 + n1 + n2));

	vec4 p0 = gl_TessCoord.x * tcPosition[0];
    vec4 p1 = gl_TessCoord.y * tcPosition[1];
    vec4 p2 = gl_TessCoord.z * tcPosition[2];
	position = (p0 + p1 + p2);

	// Calculate lightdir and eye position for lighting
	teLightDir = vec3(viewMatrix * lightDir);
	teEye = -vec3(viewModelMatrix * position);
	
	// Displace the vertex along the normal
	float Displacement = texture(gDisplacementMap, teTexCoord.xy).x;
	position.xyz += teNormal * Displacement * gDispFactor;
	gl_Position = projViewModelMatrix * position;
	teNormal = normalMatrix * teNormal;	// Multiply by the normalMatrix only now because of the displacement
}
